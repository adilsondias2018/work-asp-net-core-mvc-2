<!--A declaração do objeto MOdel que corresponde ao objeto de argumento passado pelo argumento view 
    O IEnumerable aceitas vários tipos de list arrays e etc..
    
 -->
@model IEnumerable<SalesWebMvc01.Models.Seller>
@{
    ViewData["Title"] = "Sellers";
}

<h2>@ViewData["Title"]</h2>

<p>
    <a asp-action="Create" class="btn btn-default">Create New</a> 
</p>

<table class="table table-striped table-hover" >
    <thead>
        <tr class=" success">
            <th>
                <!-- Display para exibir o nome do campo perceba que é DisplayNameFor-->
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BirthDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BaseSalary)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BaseSalary)
            </th>
        </tr>
     </thead>
    <tbody>
     
        @foreach(var item in Model)
        {
        <tr>
            <!-- Display para exibir o conteúdo do campo perceba que é DisplayFor aqui não existe o Name.
             Perceba que temo o apelido ITEM no for e também temos outros apelido o modelItem nas tags.
             -->
            <td>@Html.DisplayFor(modelItem => item.Name)</td>
            <td>@Html.DisplayFor(modelItem => item.Email)</td>
            <td>@Html.DisplayFor(modelItem => item.BirthDate)</td>
            <td>@Html.DisplayFor(modelItem => item.BaseSalary)</td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a>|
                <a asp-action="Details" asp-route-id="@item.Id">Edit</a>|
                <a asp-action="Delete" asp-route-id="@item.Id">Edit</a>
            </td>

        </tr>

        }


    </tbody>



</table>



